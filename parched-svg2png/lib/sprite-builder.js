// Generated by CoffeeScript 1.8.0
var Async, Fs, JOB_LIMIT, Path, SpriteBuilder, SpriteSmith, Svg2png, mkdirp, sha1;

Path = require('path');

Fs = require('fs');

Async = require('async');

SpriteSmith = require('spritesmith');

Svg2png = require('../vendor/svg2png');

mkdirp = require('mkdirp');

JOB_LIMIT = require('os').cpus().length;

sha1 = require('./util').sha1;

module.exports = SpriteBuilder = (function() {
  function SpriteBuilder(optionsClone, done) {
    this.optionsClone = optionsClone;
    this.done = done;
    this.images = [];
    this.images2x = [];
  }

  SpriteBuilder.prototype.allDone = function() {
    return typeof this.done === "function" ? this.done.apply(this, arguments) : void 0;
  };

  SpriteBuilder.prototype.build = function() {
    return Async.parallelLimit(this.makePngTasks(), JOB_LIMIT, (function(_this) {
      return function(errPreProcess) {
        if (errPreProcess) {
          return _this.allDone(errPreProcess);
        }
        return Async.parallelLimit(_this.spritesmithTasks(), JOB_LIMIT, function(errSpriteSmith) {
          if (errSpriteSmith) {
            return _this.allDone(errSpriteSmith);
          }
          return _this.allDone();
        });
      };
    })(this));
  };

  SpriteBuilder.prototype.makePngTasks = function() {
    var file, tasks, _i, _len, _ref;
    tasks = [];
    _ref = this.optionsClone.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      tasks.push(this.makePng({
        file: file.path
      }));
      tasks.push(this.makePng({
        file: file.path,
        retina: true
      }));
    }
    return tasks;
  };

  SpriteBuilder.prototype.spritesmithTasks = function() {
    return [
      this.makeSprite({}), this.makeSprite({
        retina: true
      })
    ];
  };

  SpriteBuilder.prototype.makePng = function(o) {
    return (function(_this) {
      return function(next) {
        var basename, imageCache, scale, tmpName, _ref;
        _ref = _this.scaleForImage(o), basename = _ref[0], scale = _ref[1];
        imageCache = _this.images;
        if (o.retina) {
          basename = "" + basename + "-2x";
          imageCache = _this.images2x;
          scale = scale * 2;
        }
        tmpName = "tmp/parched-svg2png/" + basename + ".png";
        return Svg2png(o.file, tmpName, scale, function(err) {
          imageCache.push(tmpName);
          return next(err);
        });
      };
    })(this);
  };

  SpriteBuilder.prototype.scaleForImage = function(o) {
    var basename, data, sizeHint, sizeHintMatch, svgWidth, svgWidthMatch;
    basename = Path.basename(o.file, '.svg');
    sizeHintMatch = /(_w([0-9]+))/.exec(basename);
    if (sizeHintMatch) {
      data = Fs.readFileSync(o.file, {
        encoding: 'utf-8'
      });
      svgWidthMatch = /<svg(?:.*?)width="([^"]+)"/.exec(data);
      svgWidth = svgWidthMatch[1].replace('px', '');
      svgWidth = parseFloat(svgWidth);
      sizeHint = parseFloat(sizeHintMatch[2]);
      return [basename.replace(sizeHintMatch[1], ''), sizeHint / svgWidth];
    }
    return [basename, 1.0];
  };

  SpriteBuilder.prototype.makeSprite = function(o) {
    return (function(_this) {
      return function(next) {
        var files, output, pluginProp, spritesmithOptions;
        files = _this.images;
        output = _this.optionsClone.outputImage;
        pluginProp = 'spriteMap';
        if (o.retina) {
          files = _this.images2x;
          output = output.replace('.png', '-2x.png');
          pluginProp = "" + pluginProp + "2x";
        }
        spritesmithOptions = {
          algorithm: 'binary-tree',
          format: 'png',
          src: files
        };
        return SpriteSmith(spritesmithOptions, function(err, result) {
          var e, fileName, uuid;
          if (err) {
            next(err);
            return;
          }
          uuid = sha1(result.image, 10, 'binary');
          fileName = output.replace('.png', "-" + uuid + ".png");
          _this.optionsClone[pluginProp] = {
            coordinates: result.coordinates,
            fileName: fileName,
            properties: result.properties
          };
          try {
            mkdirp.sync(Path.dirname(fileName));
            Fs.writeFileSync(fileName, result.image, 'binary');
            return next();
          } catch (_error) {
            e = _error;
            return next(e);
          }
        });
      };
    })(this);
  };

  return SpriteBuilder;

})();
