// Generated by CoffeeScript 1.8.0
var CSSBuilder, Eco, Fs, Path;

Fs = require('fs');

Path = require('path');

Eco = require('eco');

module.exports = CSSBuilder = (function() {
  CSSBuilder.prototype.supportedStates = ['hover', 'target', 'active', 'focus'];

  CSSBuilder.prototype.supportedPreprocessors = ['css', 'sass', 'scss'];

  function CSSBuilder(options, callback) {
    this.options = options;
    this.callback = callback;
  }

  CSSBuilder.prototype.allDone = function() {
    return typeof this.callback === "function" ? this.callback() : void 0;
  };

  CSSBuilder.prototype.build = function() {
    Fs.writeFileSync(this.options.outputCSS, this.compiled(), 'utf8');
    return this.allDone();
  };

  CSSBuilder.prototype.templateData = function() {
    var key, ret;
    ret = this.options;
    ret.cssClassPrefix = this.options.cssClassPrefix;
    ret.usePlaceholderSelectors = this.options.usePlaceholderSelectors;
    ret.leader = this.preprocessor() === 'css' ? '.' : this.options.usePlaceholderSelectors ? '%' : '.';
    ret.baseclasses = (function() {
      var _results;
      _results = [];
      for (key in this.options.codepoints) {
        _results.push("." + ret.cssClassPrefix + "-" + key);
      }
      return _results;
    }).call(this);
    ret.baseclassesJoined = ret.baseclasses.join(', ');
    return ret;
  };

  CSSBuilder.prototype.compiled = function() {
    var compiled, templateContents, templateData, templatePath;
    templateData = this.templateData();
    templateData.halved = function(n) {
      return Math.ceil(n / 2);
    };
    templatePath = this.templatePath(this.preprocessor());
    templateContents = Fs.readFileSync(templatePath, 'utf8');
    compiled = Eco.render(templateContents, templateData);
    return compiled.replace(/(\r?\n){2,}/g, "\n\n").trim();
  };

  CSSBuilder.prototype.templatePath = function(template) {
    var relative;
    relative = Path.join(__dirname, '..', 'templates', "template." + template + ".eco");
    return Path.normalize(relative);
  };

  CSSBuilder.prototype.preprocessor = function() {
    var outputCSS, processor, _i, _len, _ref;
    outputCSS = this.options.outputCSS;
    _ref = this.supportedPreprocessors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      processor = _ref[_i];
      if (RegExp("\\." + processor + "$").test(outputCSS)) {
        return processor;
      }
    }
    throw new Error("Svg2PngSprite doesn't know how to write `" + outputCSS + "`");
  };

  return CSSBuilder;

})();
